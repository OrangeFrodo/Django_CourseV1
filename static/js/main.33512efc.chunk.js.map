{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","TweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,+LCIpC,SAASC,EAAgBC,GAC9B,IAAMC,EAAcC,IAAMC,YADW,EAEHC,mBAAS,IAFN,mBAE9BC,EAF8B,KAEnBC,EAFmB,KAgBrC,OAAO,yBAAKC,UAAWP,EAAMO,WACrB,yBAAKA,UAAU,eACb,0BAAMC,SAfK,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GACxBS,EAAcC,QAAQ,CACpBC,QAASL,EACTM,MAAO,EACPC,GAAK,MAEPZ,EAAaQ,GACbK,QAAQC,IAAIT,GACZV,EAAYW,QAAQC,MAAQ,KAKlB,8BAAUQ,IAAKpB,EAAaqB,UAAU,EAAMf,UAAY,eAAegB,KAAK,UAG5E,4BAAQC,KAAK,SAASjB,UAAU,wBAAhC,WAGN,kBAACkB,EAAD,CAAYpB,UAAWA,KAIxB,SAASoB,EAAWzB,GAAQ,IAAD,EACMI,mBAAS,IADf,mBACvBsB,EADuB,KACXC,EADW,OAEFvB,mBAAS,IAFP,mBAEvBwB,EAFuB,KAEfC,EAFe,KAoB9B,OAjBAC,qBAAU,WACR,IAAMC,EAAQ,YAAI/B,EAAMK,WAAW2B,OAAON,GACtCK,EAAME,SAAWL,EAAOK,QAC1BJ,EAAUE,KAEX,CAAC/B,EAAMK,UAAWuB,EAAQF,IAE7BI,qBAAU,YCzCP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,qCAIZH,EAAII,OAAS,WACVL,EAASC,EAAIK,SAAUL,EAAIM,SAE9BN,EAAIO,QAAU,SAAUC,GACtBxB,QAAQC,IAAIuB,GACZT,EAAS,CAAC,QAAW,4BAA6B,MAEpDC,EAAIS,ODmCFC,EAPmB,SAACL,EAAUC,GACb,MAAXA,EACFd,EAAca,GAEdM,MAAM,2BAIT,IACIlB,EAAOmB,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAACC,EAAD,CAAOC,MAAOH,EAAMzC,UAAU,sCAAsC6C,IAAG,UAAKH,EAAL,mBAI7E,SAASI,EAAUrD,GAAQ,IACvBmD,EAAiBnD,EAAjBmD,MAAOG,EAAUtD,EAAVsD,OADe,EAEHlD,mBAAS+C,EAAMlC,MAAQkC,EAAMlC,MAAQ,GAFlC,mBAEtBA,EAFsB,KAEfsC,EAFe,OAGGnD,oBAA4B,IAAnB+C,EAAMK,UAHlB,mBAGtBA,EAHsB,KAGZC,EAHY,KAIvBlD,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,kBAChDmD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAelDA,EAA0B,SAAhBL,EAAO9B,KAAP,UAA4BP,EAA5B,YAAqCqC,EAAOK,SAAYD,EACxE,OAAO,4BAAQnD,UAAWA,EAAWqD,QAdjB,SAACnD,GACnBA,EAAMC,iBACc,SAAhB4C,EAAO9B,QACQ,IAAbgC,GACFD,EAAStC,EAAO,GAChBwC,GAAY,KAEZF,EAASJ,EAAMlC,MAAQ,GACvBwC,GAAY,OAM0CE,GAGzD,SAAST,EAAMlD,GAAQ,IACnBmD,EAASnD,EAATmD,MACD5C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BAItD,OAAO,yBAAKA,UAAWA,GACnB,2BAAI4C,EAAMjC,GAAV,MAAiBiC,EAAMnC,SACvB,yBAAKT,UAAY,iBACf,kBAAC8C,EAAD,CAAWF,MAAOA,EAAOG,OANlB,CAAC9B,KAAK,OAAQmC,QAAQ,WAO7B,kBAACN,EAAD,CAAWF,MAAOA,EAAOG,OANhB,CAAC9B,KAAK,SAAUmC,QAAQ,YAOjC,kBAACN,EAAD,CAAWF,MAAOA,EAAOG,OANf,CAAC9B,KAAK,UAAWmC,QAAQ,eEvD9BE,MAzBf,WAEE,OACE,yBAAKtD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKuD,IAAKC,IAAMxD,UAAU,WAAWyD,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAACjE,EAAD,OAEF,uBACEQ,UAAU,WACV0D,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAI3B,IAAMK,EAAWJ,SAASC,eAAe,QACrCG,GACFF,IAASC,OAAO,kBAAC9E,EAAD,MAAqB+E,GDoHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.33512efc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useEffect, useState } from 'react'\r\n\r\nimport {loadTweets} from \"../lookup\"\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef()\r\n  const [newTweets, setNewTweets] = useState([])\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newVal = textAreaRef.current.value\r\n    let tempNewTweets = [...newTweets]\r\n    tempNewTweets.unshift({\r\n      content: newVal,\r\n      likes: 0,\r\n      id : 135\r\n    })\r\n    setNewTweets(tempNewTweets)\r\n    console.log(newVal)\r\n    textAreaRef.current.value = \"\"\r\n  }\r\n  return <div className={props.className}>\r\n          <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n              <textarea ref={textAreaRef} required={true} className = 'form-control' name='tweet'>\r\n\r\n              </textarea>\r\n              <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n            </div>\r\n        <TweetsList newTweets={newTweets}/>\r\n    </div> \r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(()=>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n  \r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setTweetsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [])\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n    })\r\n  }\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary'\r\n    const actionDisplay = action.display ? action.display : \"Action\"\r\n    \r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if (action.type === \"like\") {\r\n        if (userLike === true) {\r\n          setLikes(likes -+ 1)\r\n          setUserLike(false)\r\n        } else {\r\n          setLikes(tweet.likes + 1)\r\n          setUserLike(true)\r\n        }\r\n\r\n      }\r\n    }\r\n    const display = action.type === \"like\" ? `${likes} ${action.display}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    const like = {type:\"like\", display:\"Likes\"}\r\n    const unlike = {type:\"unlike\", display:\"Unlike\"}\r\n    const retweet = {type:\"retweet\", display:\"Retweet\"}\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className = 'btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={like}/>\r\n          <ActionBtn tweet={tweet} action={unlike}/>\r\n          <ActionBtn tweet={tweet} action={retweet}/>\r\n        </div>\r\n    </div>\r\n  }","\r\n\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest() \r\n    const method = \"GET\"\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n       callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {TweetsComponent} from \"./tweets\"\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <div>\r\n          <TweetsComponent/>\r\n        </div>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {TweetsComponent} from './tweets'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst appEl = document.getElementById('root')\r\nif (appEl) {\r\n  ReactDOM.render(<App />, appEl\r\n  );\r\n}\r\n\r\nconst TweetsEl = document.getElementById('news')\r\nif (TweetsEl) {\r\n  ReactDOM.render(<TweetsComponent />, TweetsEl\r\n  );\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}